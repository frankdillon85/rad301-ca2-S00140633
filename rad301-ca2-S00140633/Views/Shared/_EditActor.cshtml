@model rad301_ca2_S00140633.Models.Actor


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditActorForm" }))
{
    @Html.AntiForgeryToken()

    <h4 style="color:teal" class="text-center">Edit Actor in @Model.Movie.Title</h4>
    <div class="form-horizontal col-md-offset-2">      
        <hr />
        @Html.HiddenFor(model => model.ActorId)
        @Html.HiddenFor(model => model.MovieId)

        <label id="lblError" style="color:red; display:none" class="input-sm">*All Fields must be filled in</label>
        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "First Name" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Last Name" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Character, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Character Name" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control input-sm" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 text-center">
                <input type="submit" value="Save Changes" class="btn btn-sm btn-success" />
            </div>
        </div>
    </div>
}

<div class="col-md-12 text-center" >
    <button class="btn btn-xs btn-info" onclick="BackActors(@Model.MovieId)">Back to Actors</button>
</div>

<script>
    $('#EditActorForm').submit(function () {

        if(($(this).find('input[name="FirstName"]').val() != "")&&($(this).find('input[name="LastName"]').val() != "")&&($(this).find('input[name="Character"]').val() != ""))
        {
            debugger;
            $.ajax({
                url: '@Url.Action("EditActor")',
                type: "POST",
                data: $(this).serialize(),
                success: function (data) {
                    $.ajax({
                        url: '@Url.Action("showPieChart", new {id= @Model.MovieId })',//update pie chart
                        type: "GET",
                        success: function (dataPiechart) {
                            $('#ActorsDiv').hide();
                            $('#ActorsDiv').html(data);
                            $('#ActorsDiv').fadeIn(1000);
                            $('#piechart').hide();
                            $('#piechart').html(dataPiechart);
                            $('#piechart').fadeIn(1000);
                        },
                        error: function () {
                            $('#piechart').html('<h3>Error updating PieChart</h3>');
                        }
                    });
                },
                error: function () {
                    $('#ActorsDiv').html('<h3>Error editing Actor</h3>');
                }
            });

        }
        else
        {
            $('#lblError').show();
        }

        return false;
    });

</script>

